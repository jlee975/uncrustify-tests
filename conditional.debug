# Uncrustify 0.64_d
input_tab_size                  = 4
output_tab_size                 = 4
sp_arith                        = force
sp_assign                       = force
sp_assign_default               = force
sp_enum_assign                  = force
sp_pp_concat                    = force
sp_pp_stringify                 = force
sp_bool                         = force
sp_compare                      = force
sp_inside_paren                 = force
sp_cparen_oparen                = force
sp_paren_brace                  = force
sp_before_ptr_star              = remove
sp_between_ptr_star             = remove
sp_after_ptr_star               = force
sp_after_ptr_star_qualifier     = force
sp_after_ptr_star_func          = force
sp_before_ptr_star_func         = remove
sp_before_byref                 = remove
sp_after_byref                  = force
sp_after_byref_func             = force
sp_before_byref_func            = remove
sp_template_angle               = remove
sp_before_angle                 = remove
sp_inside_angle                 = force
sp_after_angle                  = remove
sp_angle_paren                  = remove
sp_angle_paren_empty            = remove
sp_angle_word                   = force
sp_angle_shift                  = force
sp_before_sparen                = force
sp_inside_sparen                = force
sp_after_sparen                 = remove
sp_sparen_brace                 = remove
sp_special_semi                 = force
sp_before_semi_for              = remove
sp_before_semi_for_empty        = remove
sp_after_semi                   = remove
sp_after_semi_for_empty         = remove
sp_before_square                = remove
sp_before_squares               = remove
sp_inside_square                = remove
sp_after_comma                  = force
sp_before_ellipsis              = remove
sp_after_class_colon            = force
sp_before_class_colon           = force
sp_after_constr_colon           = force
sp_before_constr_colon          = force
sp_after_operator               = remove
sp_after_operator_sym           = remove
sp_after_operator_sym_empty     = remove
sp_after_cast                   = force
sp_inside_paren_cast            = remove
sp_cpp_cast_paren               = remove
sp_sizeof_paren                 = remove
sp_inside_braces_enum           = remove
sp_inside_braces_struct         = remove
sp_inside_braces                = force
sp_inside_braces_empty          = remove
sp_func_proto_paren             = remove
sp_func_proto_paren_empty       = remove
sp_func_def_paren               = remove
sp_func_def_paren_empty         = remove
sp_inside_fparens               = remove
sp_inside_fparen                = remove
sp_square_fparen                = remove
sp_fparen_brace                 = force
sp_func_call_paren              = remove
sp_func_class_paren             = remove
sp_func_class_paren_empty       = remove
sp_return_paren                 = force
sp_attribute_paren              = remove
sp_defined_paren                = remove
sp_throw_paren                  = force
sp_catch_paren                  = force
sp_macro                        = force
sp_macro_func                   = force
sp_else_brace                   = force
sp_brace_else                   = force
sp_brace_typedef                = force
sp_catch_brace                  = force
sp_brace_catch                  = force
sp_try_brace                    = force
sp_word_brace                   = remove
sp_word_brace_ns                = force
sp_before_dc                    = remove
sp_after_dc                     = remove
sp_cond_colon                   = force
sp_cond_question                = force
sp_case_label                   = force
sp_cmt_cpp_start                = force
sp_cmt_cpp_doxygen              = true
sp_cmt_cpp_qttr                 = true
sp_endif_cmt                    = force
sp_after_new                    = force
sp_between_new_paren            = remove
sp_before_tr_emb_cmt            = force
indent_columns                  = 4
indent_class                    = true
indent_func_call_param          = true
indent_func_def_param           = true
indent_paren_close              = 2
nl_assign_leave_one_liners      = true
nl_enum_leave_one_liners        = true
nl_cpp_lambda_leave_one_liners  = true
nl_start_of_file                = remove
nl_end_of_file                  = force
nl_end_of_file_min              = 1
nl_assign_brace                 = force
nl_func_var_def_blk             = 1
nl_fcall_brace                  = force
nl_enum_brace                   = force
nl_struct_brace                 = force
nl_union_brace                  = force
nl_if_brace                     = force
nl_brace_else                   = force
nl_elseif_brace                 = force
nl_else_brace                   = force
nl_else_if                      = remove
nl_try_brace                    = force
nl_for_brace                    = force
nl_catch_brace                  = force
nl_brace_catch                  = force
nl_brace_square                 = force
nl_brace_fparen                 = force
nl_while_brace                  = force
nl_do_brace                     = force
nl_brace_while                  = force
nl_switch_brace                 = force
nl_multi_line_cond              = true
nl_before_throw                 = force
nl_namespace_brace              = force
nl_template_class               = force
nl_class_brace                  = force
nl_func_type_name               = remove
nl_func_class_scope             = remove
nl_func_scope_name              = remove
nl_func_proto_type_name         = remove
nl_func_paren                   = remove
nl_func_def_paren               = remove
nl_func_decl_start              = remove
nl_func_def_start               = force
nl_func_def_start_single        = remove
nl_func_decl_args               = remove
nl_func_def_args                = force
nl_func_decl_end                = remove
nl_func_def_end                 = force
nl_func_def_end_single          = remove
nl_func_decl_empty              = remove
nl_func_def_empty               = remove
nl_fdef_brace                   = force
nl_after_vbrace_close           = true
nl_before_if                    = force
nl_after_if                     = force
nl_before_for                   = force
nl_after_for                    = force
nl_before_while                 = force
nl_after_while                  = force
nl_before_switch                = force
nl_after_switch                 = force
nl_before_do                    = force
nl_after_do                     = force
nl_after_func_proto_group       = 1
nl_after_func_body              = 2
nl_after_func_body_class        = 2
nl_after_func_body_one_liner    = 2
nl_after_struct                 = 1
nl_after_class                  = 1
nl_before_access_spec           = 1
nl_after_return                 = true
align_func_params               = true
align_var_def_span              = 1
align_assign_span               = 1
align_var_class_span            = 1
align_right_cmt_span            = 2
align_pp_define_span            = 4
mod_full_brace_do               = force
mod_full_brace_for              = force
mod_full_brace_if               = force
mod_full_brace_while            = force
mod_paren_on_return             = remove
mod_remove_extra_semicolon      = true
mod_add_long_switch_closebrace_comment = 20
mod_add_long_ifdef_endif_comment = 20
pp_indent_at_level              = true
# option(s) with 'not default' value: 186
#
# -=====-
# Line              Tag           Parent          Columns Br/Lvl/pp     Flag   Nl  Text
#   1>          PREPROC[      PP_INCLUDE][  1/  1/  2/  0][0/0/0][ 100080001][0-0] #
#   1>       PP_INCLUDE[            NONE][  2/  2/  9/  0][0/0/0][         1][0-0]  include
#   1>           STRING[            NONE][ 10/ 10/ 20/  1][0/0/0][         1][0-0]          <iostream>
#   1>          NEWLINE[            NONE][ 20/ 20/  1/  0][0/0/0][         0][2-0]
#   3>         TEMPLATE[            NONE][  1/  1/  9/  0][0/0/0][     60000][0-0] template
#   3>       ANGLE_OPEN[        TEMPLATE][  9/  9/ 10/  0][0/0/0][ 100000040][0-0]         <
#   3>             TYPE[            NONE][ 11/ 11/ 15/  1][0/1/0][     50040][0-0]           bool
#   3>             TYPE[            NONE][ 16/ 16/ 17/  1][0/1/0][        40][0-0]                B
#   3>      ANGLE_CLOSE[        TEMPLATE][ 18/ 18/ 19/  1][0/0/0][ 100000040][0-0]                  >
#   3>          NEWLINE[            NONE][ 19/ 19/  1/  0][0/0/0][         0][1-0]
#   4>           STRUCT[        TEMPLATE][  1/  1/  7/  0][0/0/0][     50002][0-0] struct
#   4>             TYPE[          STRUCT][  8/  8/ 21/  1][0/0/0][         2][0-0]        bool_constant
#   4>          NEWLINE[            NONE][ 21/ 21/  1/  0][0/0/0][         2][1-0]
#   5>       BRACE_OPEN[          STRUCT][  1/  1/  2/  0][0/0/0][ 100000002][0-0] {
#   5>          NEWLINE[            NONE][  2/  2/  5/  0][1/1/0][         2][1-0]
#   6>        QUALIFIER[            NONE][  5/  5/ 11/  0][1/1/0][  10470402][0-1]     static
#   6>        QUALIFIER[            NONE][ 12/ 12/ 17/  1][1/1/0][  10410402][0-0]            const
#   6>             TYPE[            NONE][ 18/ 18/ 22/  1][1/1/0][  10410402][0-0]                  bool
#   6>             WORD[            NONE][ 23/ 23/ 28/  1][1/1/0][  11900402][0-0]                       value
#   6>           ASSIGN[            NONE][ 29/ 29/ 30/  1][1/1/0][ 100100402][0-0]                             =
#   6>             WORD[            NONE][ 31/ 31/ 32/  1][1/1/0][     40402][0-0]                               B
#   6>        SEMICOLON[            NONE][ 32/ 32/ 33/  0][1/1/0][ 100000402][0-0]                                ;
#   6>          NEWLINE[            NONE][ 33/ 33/  1/  0][1/1/0][         2][1-0]
#   7>      BRACE_CLOSE[          STRUCT][  1/  1/  2/  0][0/0/0][ 100000400][0-0] }
#   7>        SEMICOLON[          STRUCT][  2/  2/  3/  0][0/0/0][ 100000000][0-0]  ;
#   7>          NEWLINE[            NONE][  3/  3/  1/  0][0/0/0][         0][2-0]
#   9>      COMMENT_CPP[   COMMENT_WHOLE][  1/  1/ 60/  0][0/0/0][         0][0-0] // Lose space before && in foo< ... > but not in assignment
#   9>          NEWLINE[            NONE][ 60/ 60/  1/  0][0/0/0][         0][1-0]
#  10>      COMMENT_CPP[   COMMENT_WHOLE][  1/  1/ 14/  0][0/0/0][         0][0-0] // of "value"
#  10>          NEWLINE[            NONE][ 14/ 14/  1/  0][0/0/0][         0][1-0]
#  11>         TEMPLATE[            NONE][  1/  1/  9/  0][0/0/0][     60000][0-0] template
#  11>       ANGLE_OPEN[        TEMPLATE][  9/  9/ 10/  0][0/0/0][ 100000040][0-0]         <
#  11>             TYPE[            NONE][ 11/ 11/ 16/  1][0/1/0][  10050040][0-0]           class
#  11>             TYPE[            NONE][ 17/ 17/ 19/  1][0/1/0][  10000040][0-0]                 B1
#  11>           ASSIGN[            NONE][ 20/ 20/ 21/  1][0/1/0][ 100000040][0-0]                    =
#  11>             TYPE[            NONE][ 22/ 22/ 26/  1][0/1/0][     40040][0-0]                      void
#  11>            COMMA[            NONE][ 26/ 26/ 27/  0][0/1/0][ 100000040][0-0]                          ,
#  11>             TYPE[            NONE][ 28/ 28/ 33/  1][0/1/0][  10050040][0-0]                            class
#  11>             TYPE[            NONE][ 34/ 34/ 36/  1][0/1/0][  10000040][0-0]                                  B2
#  11>           ASSIGN[            NONE][ 37/ 37/ 38/  1][0/1/0][ 100000040][0-0]                                     =
#  11>             TYPE[            NONE][ 39/ 39/ 43/  1][0/1/0][     40040][0-0]                                       void
#  11>      ANGLE_CLOSE[        TEMPLATE][ 44/ 44/ 45/  1][0/0/0][ 100000040][0-0]                                            >
#  11>          NEWLINE[            NONE][ 45/ 45/  1/  0][0/0/0][         0][1-0]
#  12>           STRUCT[        TEMPLATE][  1/  1/  7/  0][0/0/0][     50000][0-0] struct
#  12>             TYPE[          STRUCT][  8/  8/ 19/  1][0/0/0][         0][0-0]        conjunction
#  12>      CLASS_COLON[          STRUCT][ 20/ 20/ 21/  1][0/0/0][ 100000800][0-0]                    :
#  12>             WORD[            NONE][ 22/ 22/ 35/  1][0/0/0][   1860800][0-0]                      bool_constant
#  12>       ANGLE_OPEN[        TEMPLATE][ 35/ 35/ 36/  0][0/0/0][ 100000840][0-0]                                   <
#  12>             TYPE[            NONE][ 37/ 36/ 38/  0][0/1/0][     40840][0-0]                                     B1
#  12>        DC_MEMBER[            NONE][ 39/ 38/ 40/  0][0/1/0][ 100000840][0-0]                                       ::
#  12>             TYPE[            NONE][ 41/ 40/ 45/  0][0/1/0][       840][0-0]                                         value
#  12>            BYREF[            NONE][ 46/ 45/ 47/  0][0/1/0][ 100000840][0-0]                                              &&
#  12>             TYPE[            NONE][ 49/ 47/ 49/  0][0/1/0][       840][0-0]                                                 B2
#  12>        DC_MEMBER[            NONE][ 51/ 49/ 51/  0][0/1/0][ 100000840][0-0]                                                   ::
#  12>             TYPE[            NONE][ 53/ 51/ 56/  0][0/1/0][       840][0-0]                                                     value
#  12>      ANGLE_CLOSE[        TEMPLATE][ 59/ 56/ 57/  0][0/0/0][ 100000840][0-0]                                                           >
#  12>          NEWLINE[            NONE][ 60/ 57/  1/  0][0/0/0][         0][1-0]
#  13>       BRACE_OPEN[          STRUCT][  1/  1/  2/  0][0/0/0][ 140040000][0-0] {
#  13>          NEWLINE[            NONE][  2/  2/  1/  0][1/1/0][         0][1-0]
#  14>      BRACE_CLOSE[          STRUCT][  1/  1/  2/  0][0/0/0][ 140000400][0-0] }
#  14>        SEMICOLON[          STRUCT][  2/  2/  3/  0][0/0/0][ 100000000][0-0]  ;
#  14>          NEWLINE[            NONE][  3/  3/  1/  0][0/0/0][         0][2-0]
#  16>           STRUCT[            NONE][  1/  1/  7/  0][0/0/0][     70002][0-0] struct
#  16>             TYPE[          STRUCT][  8/  8/ 14/  1][0/0/0][         2][0-0]        dummy1
#  16>          NEWLINE[            NONE][ 14/ 14/  1/  0][0/0/0][         2][1-0]
#  17>       BRACE_OPEN[          STRUCT][  1/  1/  2/  0][0/0/0][ 100000002][0-0] {
#  17>          NEWLINE[            NONE][  2/  2/  5/  0][1/1/0][         2][1-0]
#  18>        QUALIFIER[            NONE][  5/  5/ 11/  0][1/1/0][  10470402][0-1]     static
#  18>        QUALIFIER[            NONE][ 12/ 12/ 17/  1][1/1/0][  10410402][0-0]            const
#  18>             TYPE[            NONE][ 18/ 18/ 22/  1][1/1/0][  10410402][0-0]                  bool
#  18>             WORD[            NONE][ 23/ 23/ 28/  1][1/1/0][  11900402][0-0]                       value
#  18>           ASSIGN[            NONE][ 29/ 29/ 30/  1][1/1/0][ 100100402][0-0]                             =
#  18>             WORD[            NONE][ 31/ 31/ 35/  1][1/1/0][     40402][0-0]                               true
#  18>        SEMICOLON[            NONE][ 35/ 35/ 36/  0][1/1/0][ 100000402][0-0]                                   ;
#  18>          NEWLINE[            NONE][ 36/ 36/  1/  0][1/1/0][         2][1-0]
#  19>      BRACE_CLOSE[          STRUCT][  1/  1/  2/  0][0/0/0][ 100000400][0-0] }
#  19>        SEMICOLON[          STRUCT][  2/  2/  3/  0][0/0/0][ 100000000][0-0]  ;
#  19>          NEWLINE[            NONE][  3/  3/  1/  0][0/0/0][         0][2-0]
#  21>           STRUCT[            NONE][  1/  1/  7/  0][0/0/0][     70002][0-0] struct
#  21>             TYPE[          STRUCT][  8/  8/ 14/  1][0/0/0][         2][0-0]        dummy2
#  21>          NEWLINE[            NONE][ 14/ 14/  1/  0][0/0/0][         2][1-0]
#  22>       BRACE_OPEN[          STRUCT][  1/  1/  2/  0][0/0/0][ 100000002][0-0] {
#  22>          NEWLINE[            NONE][  2/  2/  5/  0][1/1/0][         2][1-0]
#  23>        QUALIFIER[            NONE][  5/  5/ 11/  0][1/1/0][  10470402][0-1]     static
#  23>        QUALIFIER[            NONE][ 12/ 12/ 17/  1][1/1/0][  10410402][0-0]            const
#  23>             TYPE[            NONE][ 18/ 18/ 22/  1][1/1/0][  10410402][0-0]                  bool
#  23>             WORD[            NONE][ 23/ 23/ 28/  1][1/1/0][  11900402][0-0]                       value
#  23>           ASSIGN[            NONE][ 29/ 29/ 30/  1][1/1/0][ 100100402][0-0]                             =
#  23>             WORD[            NONE][ 31/ 31/ 36/  1][1/1/0][     40402][0-0]                               false
#  23>        SEMICOLON[            NONE][ 36/ 36/ 37/  0][1/1/0][ 100000402][0-0]                                    ;
#  23>          NEWLINE[            NONE][ 37/ 37/  1/  0][1/1/0][         2][1-0]
#  24>      BRACE_CLOSE[          STRUCT][  1/  1/  2/  0][0/0/0][ 100000400][0-0] }
#  24>        SEMICOLON[          STRUCT][  2/  2/  3/  0][0/0/0][ 100000000][0-0]  ;
#  24>          NEWLINE[            NONE][  3/  3/  1/  0][0/0/0][         0][2-0]
#  26>             TYPE[        FUNC_DEF][  1/  1/  4/  0][0/0/0][     70000][0-0] int
#  26>         FUNC_DEF[            NONE][  5/  5/  9/  1][0/0/0][         0][0-0]     main
#  26>      FPAREN_OPEN[        FUNC_DEF][  9/  9/ 10/  0][0/0/0][ 100000000][0-0]         (
#  26>     FPAREN_CLOSE[        FUNC_DEF][ 10/ 10/ 11/  0][0/0/0][ 100000000][0-0]          )
#  26>          NEWLINE[            NONE][ 11/ 11/  1/  0][0/0/0][         0][1-0]
#  27>       BRACE_OPEN[        FUNC_DEF][  1/  1/  2/  0][0/0/0][ 100000000][0-0] {
#  27>          NEWLINE[            NONE][  2/  2/  5/  0][1/1/0][         0][1-0]
#  28>             TYPE[            NONE][  5/  5/  8/  0][1/1/0][     60000][0-1]     std
#  28>        DC_MEMBER[            NONE][  8/  8/ 10/  0][1/1/0][ 100000000][0-0]        ::
#  28>             WORD[            NONE][ 10/ 10/ 14/  0][1/1/0][         0][0-0]          cout
#  28>            ARITH[            NONE][ 15/ 15/ 17/  1][1/1/0][ 100100000][0-0]               <<
#  28>       PAREN_OPEN[            NONE][ 18/ 18/ 19/  1][1/1/0][ 100040000][0-0]                  (
#  28>             TYPE[            NONE][ 20/ 19/ 25/  0][1/2/0][     40000][0-0]                    dummy1
#  28>        DC_MEMBER[            NONE][ 26/ 25/ 27/  0][1/2/0][ 100000000][0-0]                          ::
#  28>             WORD[            NONE][ 28/ 27/ 32/  0][1/2/0][         0][0-0]                            value
#  28>             BOOL[            NONE][ 34/ 32/ 34/  0][1/2/0][ 100000000][0-0]                                  &&
#  28>             TYPE[            NONE][ 37/ 34/ 40/  0][1/2/0][     40000][0-0]                                     dummy2
#  28>        DC_MEMBER[            NONE][ 43/ 40/ 42/  0][1/2/0][ 100000000][0-0]                                           ::
#  28>             WORD[            NONE][ 45/ 42/ 47/  0][1/2/0][         0][0-0]                                             value
#  28>      PAREN_CLOSE[            NONE][ 51/ 47/ 48/  0][1/1/0][ 100000000][0-0]                                                   )
#  28>            ARITH[            NONE][ 53/ 49/ 51/  1][1/1/0][ 100000000][0-0]                                                     <<
#  28>             TYPE[            NONE][ 56/ 52/ 55/  1][1/1/0][     40000][0-0]                                                        std
#  28>        DC_MEMBER[            NONE][ 59/ 55/ 57/  0][1/1/0][ 100000000][0-0]                                                           ::
#  28>             WORD[            NONE][ 61/ 57/ 61/  0][1/1/0][         0][0-0]                                                             endl
#  28>        SEMICOLON[            NONE][ 65/ 61/ 62/  0][1/1/0][ 100000000][0-0]                                                                 ;
#  28>          NEWLINE[            NONE][ 66/ 62/  5/  0][1/1/0][         0][1-0]
#  29>             TYPE[            NONE][  5/  5/  8/  0][1/1/0][     60000][0-1]     std
#  29>        DC_MEMBER[            NONE][  8/  8/ 10/  0][1/1/0][ 100000000][0-0]        ::
#  29>             WORD[            NONE][ 10/ 10/ 14/  0][1/1/0][         0][0-0]          cout
#  29>            ARITH[            NONE][ 15/ 15/ 17/  1][1/1/0][ 100100000][0-0]               <<
#  29>             WORD[            NONE][ 18/ 18/ 29/  1][1/1/0][     40000][0-0]                  conjunction
#  29>       ANGLE_OPEN[        TEMPLATE][ 29/ 29/ 30/  0][1/1/0][ 100000040][0-0]                             <
#  29>             TYPE[            NONE][ 31/ 31/ 37/  1][1/2/0][     40040][0-0]                               dummy1
#  29>            COMMA[            NONE][ 37/ 37/ 38/  0][1/2/0][ 100000040][0-0]                                     ,
#  29>             TYPE[            NONE][ 39/ 39/ 45/  1][1/2/0][     40040][0-0]                                       dummy2
#  29>      ANGLE_CLOSE[        TEMPLATE][ 46/ 46/ 47/  1][1/1/0][ 100000040][0-0]                                              >
#  29>        DC_MEMBER[            NONE][ 47/ 47/ 49/  0][1/1/0][ 100040000][0-0]                                               ::
#  29>             WORD[            NONE][ 49/ 49/ 54/  0][1/1/0][         0][0-0]                                                 value
#  29>            ARITH[            NONE][ 55/ 55/ 57/  1][1/1/0][ 100000000][0-0]                                                       <<
#  29>             TYPE[            NONE][ 58/ 58/ 61/  1][1/1/0][     40000][0-0]                                                          std
#  29>        DC_MEMBER[            NONE][ 61/ 61/ 63/  0][1/1/0][ 100000000][0-0]                                                             ::
#  29>             WORD[            NONE][ 63/ 63/ 67/  0][1/1/0][         0][0-0]                                                               endl
#  29>        SEMICOLON[            NONE][ 67/ 67/ 68/  0][1/1/0][ 100000000][0-0]                                                                   ;
#  29>          NEWLINE[            NONE][ 68/ 68/  1/  0][1/1/0][         0][1-0]
#  30>      BRACE_CLOSE[        FUNC_DEF][  1/  1/  2/  0][0/0/0][ 100000000][0-0] }
#  30>          NEWLINE[            NONE][  2/  2/  1/  0][0/0/0][         0][1-0]
# -=====-
