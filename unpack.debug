# Uncrustify 0.64_d
input_tab_size                  = 4
output_tab_size                 = 4
indent_columns                  = 4
indent_class                    = true
indent_func_call_param          = true
indent_func_def_param           = true
indent_paren_close              = 2
sp_arith                        = force
sp_assign                       = force
sp_assign_default               = force
sp_enum_assign                  = force
sp_pp_concat                    = force
sp_pp_stringify                 = force
sp_bool                         = force
sp_compare                      = force
sp_inside_paren                 = force
sp_cparen_oparen                = force
sp_paren_brace                  = force
sp_before_ptr_star              = remove
sp_between_ptr_star             = remove
sp_after_ptr_star               = force
sp_after_ptr_star_qualifier     = force
sp_after_ptr_star_func          = force
sp_before_ptr_star_func         = remove
sp_before_byref                 = remove
sp_after_byref                  = force
sp_after_byref_func             = force
sp_before_byref_func            = remove
sp_template_angle               = remove
sp_before_angle                 = remove
sp_inside_angle                 = force
sp_after_angle                  = remove
sp_angle_paren                  = remove
sp_angle_paren_empty            = remove
sp_angle_word                   = force
sp_angle_shift                  = force
sp_before_sparen                = force
sp_inside_sparen                = force
sp_after_sparen                 = remove
sp_sparen_brace                 = remove
sp_special_semi                 = force
sp_before_semi_for              = remove
sp_before_semi_for_empty        = remove
sp_after_semi                   = remove
sp_after_semi_for_empty         = remove
sp_before_square                = remove
sp_before_squares               = remove
sp_inside_square                = remove
sp_after_comma                  = force
sp_before_ellipsis              = remove
sp_after_class_colon            = force
sp_before_class_colon           = force
sp_after_constr_colon           = force
sp_before_constr_colon          = force
sp_after_operator               = remove
sp_after_operator_sym           = remove
sp_after_operator_sym_empty     = remove
sp_after_cast                   = force
sp_inside_paren_cast            = remove
sp_cpp_cast_paren               = remove
sp_sizeof_paren                 = remove
sp_inside_braces_enum           = remove
sp_inside_braces_struct         = remove
sp_inside_braces                = force
sp_inside_braces_empty          = remove
sp_func_proto_paren             = remove
sp_func_proto_paren_empty       = remove
sp_func_def_paren               = remove
sp_func_def_paren_empty         = remove
sp_inside_fparens               = remove
sp_inside_fparen                = remove
sp_square_fparen                = remove
sp_fparen_brace                 = force
sp_func_call_paren              = remove
sp_func_class_paren             = remove
sp_func_class_paren_empty       = remove
sp_return_paren                 = force
sp_attribute_paren              = remove
sp_defined_paren                = remove
sp_throw_paren                  = force
sp_catch_paren                  = force
sp_macro                        = force
sp_macro_func                   = force
sp_else_brace                   = force
sp_brace_else                   = force
sp_brace_typedef                = force
sp_catch_brace                  = force
sp_brace_catch                  = force
sp_try_brace                    = force
sp_word_brace                   = remove
sp_word_brace_ns                = force
sp_before_dc                    = remove
sp_after_dc                     = remove
sp_cond_colon                   = force
sp_cond_question                = force
sp_case_label                   = force
sp_cmt_cpp_start                = force
sp_cmt_cpp_doxygen              = true
sp_cmt_cpp_qttr                 = true
sp_endif_cmt                    = force
sp_after_new                    = force
sp_between_new_paren            = remove
sp_before_tr_emb_cmt            = force
align_func_params               = true
align_var_def_span              = 1
align_assign_span               = 1
align_var_class_span            = 1
align_right_cmt_span            = 2
align_pp_define_span            = 4
nl_assign_leave_one_liners      = true
nl_enum_leave_one_liners        = true
nl_cpp_lambda_leave_one_liners  = true
nl_start_of_file                = remove
nl_end_of_file                  = force
nl_end_of_file_min              = 1
nl_assign_brace                 = force
nl_func_var_def_blk             = 1
nl_fcall_brace                  = force
nl_enum_brace                   = force
nl_struct_brace                 = force
nl_union_brace                  = force
nl_if_brace                     = force
nl_brace_else                   = force
nl_elseif_brace                 = force
nl_else_brace                   = force
nl_else_if                      = remove
nl_try_brace                    = force
nl_for_brace                    = force
nl_catch_brace                  = force
nl_brace_catch                  = force
nl_brace_square                 = force
nl_brace_fparen                 = force
nl_while_brace                  = force
nl_do_brace                     = force
nl_brace_while                  = force
nl_switch_brace                 = force
nl_multi_line_cond              = true
nl_before_throw                 = force
nl_namespace_brace              = force
nl_template_class               = force
nl_class_brace                  = force
nl_func_type_name               = remove
nl_func_class_scope             = remove
nl_func_scope_name              = remove
nl_func_proto_type_name         = remove
nl_func_paren                   = remove
nl_func_def_paren               = remove
nl_func_decl_start              = remove
nl_func_def_start               = force
nl_func_def_start_single        = remove
nl_func_decl_args               = remove
nl_func_def_args                = force
nl_func_decl_end                = remove
nl_func_def_end                 = force
nl_func_def_end_single          = remove
nl_func_decl_empty              = remove
nl_func_def_empty               = remove
nl_fdef_brace                   = force
nl_after_vbrace_close           = true
nl_before_if                    = force
nl_after_if                     = force
nl_before_for                   = force
nl_after_for                    = force
nl_before_while                 = force
nl_after_while                  = force
nl_before_switch                = force
nl_after_switch                 = force
nl_before_do                    = force
nl_after_do                     = force
nl_after_func_proto_group       = 1
nl_after_func_body              = 2
nl_after_func_body_class        = 2
nl_after_func_body_one_liner    = 2
nl_after_struct                 = 1
nl_after_class                  = 1
nl_before_access_spec           = 1
nl_after_return                 = true
mod_full_brace_do               = force
mod_full_brace_for              = force
mod_full_brace_if               = force
mod_full_brace_while            = force
mod_paren_on_return             = remove
mod_remove_extra_semicolon      = true
mod_add_long_switch_closebrace_comment = 20
mod_add_long_ifdef_endif_comment = 20
pp_indent_at_level              = true
# option(s) with 'not default' value: 186
#
# -=====-
# Line              Tag           Parent          Columns Br/Lvl/pp     Flag   Nl  Text
#   1>          PREPROC[      PP_INCLUDE][  1/  1/  2/  0][0/0/0][ 100080001][0-0] #
#   1>       PP_INCLUDE[            NONE][  2/  2/  9/  0][0/0/0][         1][0-0]  include
#   1>           STRING[            NONE][ 10/ 10/ 18/  1][0/0/0][         1][0-0]          <vector>
#   1>          NEWLINE[            NONE][ 18/ 18/  1/  0][0/0/0][         0][2-0]
#   3>            CLASS[            NONE][  1/  1/  6/  0][0/0/0][     70000][0-0] class
#   3>             TYPE[           CLASS][  7/  7/  8/  1][0/0/0][         0][0-0]       T
#   3>          NEWLINE[            NONE][  8/  8/  1/  0][0/0/0][         0][1-0]
#   4>       BRACE_OPEN[           CLASS][  1/  1/  2/  0][0/0/0][ 100000000][0-0] {
#   4>          NEWLINE[            NONE][  2/  2/  1/  0][1/1/0][         0][1-0]
#   5>          PRIVATE[            NONE][  1/  1/  7/  0][1/1/0][     60400][0-0] public
#   5>    PRIVATE_COLON[            NONE][  7/  7/  8/  0][1/1/0][ 100000400][0-0]       :
#   5>          NEWLINE[            NONE][  8/  8/  5/  0][1/1/0][         0][1-0]
#   6>   FUNC_CLASS_DEF[            NONE][  5/  5/  6/  0][1/1/0][     60400][0-1]     T
#   6>      FPAREN_OPEN[  FUNC_CLASS_DEF][  6/  6/  7/  0][1/1/0][ 100000500][0-0]      (
#   6>     FPAREN_CLOSE[  FUNC_CLASS_DEF][  7/  7/  8/  0][1/1/0][ 100000500][0-0]       )
#   6>          NEWLINE[            NONE][  8/  8/  5/  0][1/1/0][         0][1-0]
#   7>       BRACE_OPEN[  FUNC_CLASS_DEF][  5/  5/  6/  0][1/1/0][ 140000400][0-1]     {
#   7>          NEWLINE[            NONE][  6/  6/  5/  0][2/2/0][         0][1-0]
#   8>      BRACE_CLOSE[  FUNC_CLASS_DEF][  5/  5/  6/  0][1/1/0][ 140000400][0-1]     }
#   8>          NEWLINE[            NONE][  6/  6/  5/  0][1/1/0][         0][2-0]
#  10>             TYPE[            NONE][  5/  5/ 13/  0][1/1/0][     70400][0-1]     explicit
#  10>   FUNC_CLASS_DEF[            NONE][ 14/ 14/ 15/  1][1/1/0][       400][0-0]              T
#  10>      FPAREN_OPEN[  FUNC_CLASS_DEF][ 15/ 15/ 16/  0][1/1/0][ 100000500][0-0]               (
#  10>          NEWLINE[            NONE][ 16/ 16/  9/  0][1/2/0][        10][1-0]
#  11>             TYPE[            NONE][  9/  9/ 12/  0][1/2/0][     40510][0-1]         int
#  11>            COMMA[            NONE][ 12/ 12/ 13/  0][1/2/0][ 100000510][0-0]            ,
#  11>          NEWLINE[            NONE][ 13/ 13/  9/  0][1/2/0][        10][1-0]
#  12>             TYPE[            NONE][  9/  9/ 12/  0][1/2/0][  10040510][0-1]         int
#  12>           ASSIGN[      FUNC_PROTO][ 13/ 13/ 14/  1][1/2/0][ 100000510][0-0]             =
#  12>           NUMBER[            NONE][ 15/ 15/ 16/  1][1/2/0][     40510][0-0]               0
#  12>            COMMA[            NONE][ 16/ 16/ 17/  0][1/2/0][ 100000510][0-0]                ,
#  12>          NEWLINE[            NONE][ 17/ 17/  9/  0][1/2/0][        10][1-0]
#  13>             TYPE[            NONE][  9/  9/ 12/  0][1/2/0][  10040510][0-1]         int
#  13>           ASSIGN[      FUNC_PROTO][ 13/ 13/ 14/  1][1/2/0][ 100000510][0-0]             =
#  13>           NUMBER[            NONE][ 15/ 15/ 16/  1][1/2/0][     40510][0-0]               0
#  13>          NEWLINE[            NONE][ 16/ 16/  5/  0][1/2/0][        10][1-0]
#  14>     FPAREN_CLOSE[  FUNC_CLASS_DEF][  5/  5/  6/  0][1/1/0][ 100000500][0-1]     )
#  14>          NEWLINE[            NONE][  6/  6/  5/  0][1/1/0][         0][1-0]
#  15>       BRACE_OPEN[  FUNC_CLASS_DEF][  5/  5/  6/  0][1/1/0][ 140000400][0-1]     {
#  15>          NEWLINE[            NONE][  6/  6/  5/  0][2/2/0][         0][1-0]
#  16>      BRACE_CLOSE[  FUNC_CLASS_DEF][  5/  5/  6/  0][1/1/0][ 140000400][0-1]     }
#  16>          NEWLINE[            NONE][  6/  6/  1/  0][1/1/0][         0][2-0]
#  18>      BRACE_CLOSE[           CLASS][  1/  1/  2/  0][0/0/0][ 100000400][0-0] }
#  18>        SEMICOLON[           CLASS][  2/  2/  3/  0][0/0/0][ 100000000][0-0]  ;
#  18>          NEWLINE[            NONE][  3/  3/  1/  0][0/0/0][         0][2-0]
#  20>      COMMENT_CPP[   COMMENT_WHOLE][  1/  1/ 46/  0][0/0/0][         0][0-0] // Would like ... to stay with && and with ()
#  20>          NEWLINE[            NONE][ 46/ 46/  1/  0][0/0/0][         0][1-0]
#  21>         TEMPLATE[            NONE][  1/  1/  9/  0][0/0/0][     60000][0-0] template
#  21>       ANGLE_OPEN[        TEMPLATE][  9/  9/ 10/  0][0/0/0][ 100000040][0-0]         <
#  21>             WORD[            NONE][ 11/ 11/ 16/  1][0/1/0][     40040][0-0]           class
#  21>         ELLIPSIS[            NONE][ 16/ 16/ 19/  0][0/1/0][ 100000040][0-0]                ...
#  21>             TYPE[            NONE][ 20/ 20/ 24/  1][0/1/0][        40][0-0]                    Args
#  21>      ANGLE_CLOSE[        TEMPLATE][ 25/ 25/ 26/  1][0/0/0][ 100000040][0-0]                         >
#  21>          NEWLINE[            NONE][ 26/ 26/  1/  0][0/0/0][         0][1-0]
#  22>             TYPE[            NONE][  1/  1/  4/  0][0/0/0][     40000][0-0] std
#  22>        DC_MEMBER[            NONE][  4/  4/  6/  0][0/0/0][ 100000000][0-0]    ::
#  22>             TYPE[            NONE][  6/  6/ 12/  0][0/0/0][    400000][0-0]      vector
#  22>       ANGLE_OPEN[        TEMPLATE][ 12/ 12/ 13/  0][0/0/0][ 100000040][0-0]            <
#  22>             TYPE[            NONE][ 14/ 14/ 15/  1][0/1/0][     40040][0-0]              T
#  22>      ANGLE_CLOSE[        FUNC_DEF][ 16/ 16/ 17/  1][0/0/0][ 100000040][0-0]                >
#  22>         FUNC_DEF[            NONE][ 18/ 18/ 25/  1][0/0/0][    840000][0-0]                  emplace
#  22>      FPAREN_OPEN[        FUNC_DEF][ 25/ 25/ 26/  0][0/0/0][ 100000000][0-0]                         (
#  22>             TYPE[            NONE][ 26/ 26/ 30/  0][0/1/0][    440008][0-0]                          Args
#  22>            BYREF[            NONE][ 30/ 30/ 32/  0][0/1/0][ 100000008][0-0]                              &&
#  22>         ELLIPSIS[            NONE][ 33/ 32/ 35/  0][0/1/0][ 100040008][0-0]                                 ...
#  22>             WORD[            NONE][ 37/ 36/ 40/  1][0/1/0][    900008][0-0]                                     args
#  22>     FPAREN_CLOSE[        FUNC_DEF][ 41/ 40/ 41/  0][0/0/0][ 100000000][0-0]                                         )
#  22>          NEWLINE[            NONE][ 42/ 41/  1/  0][0/0/0][         0][1-0]
#  23>       BRACE_OPEN[        FUNC_DEF][  1/  1/  2/  0][0/0/0][ 100000000][0-0] {
#  23>          NEWLINE[            NONE][  2/  2/  5/  0][1/1/0][         0][2-0]
#  25>             TYPE[            NONE][  5/  5/  8/  0][1/1/0][     60000][0-1]     std
#  25>        DC_MEMBER[            NONE][  8/  8/ 10/  0][1/1/0][ 100000000][0-0]        ::
#  25>             TYPE[            NONE][ 10/ 10/ 16/  0][1/1/0][    400000][0-0]          vector
#  25>       ANGLE_OPEN[        TEMPLATE][ 16/ 16/ 17/  0][1/1/0][ 100000040][0-0]                <
#  25>             TYPE[            NONE][ 18/ 18/ 19/  1][1/2/0][     40040][0-0]                  T
#  25>      ANGLE_CLOSE[        TEMPLATE][ 20/ 20/ 21/  1][1/1/0][ 100000040][0-0]                    >
#  25>    FUNC_CTOR_VAR[            NONE][ 22/ 22/ 23/  1][1/1/0][   1940000][0-0]                      v
#  25>      FPAREN_OPEN[   FUNC_CTOR_VAR][ 23/ 23/ 24/  0][1/1/0][ 100000000][0-0]                       (
#  25>             TYPE[            NONE][ 24/ 24/ 27/  0][1/2/0][     40008][0-0]                        std
#  25>        DC_MEMBER[            NONE][ 27/ 27/ 29/  0][1/2/0][ 100000008][0-0]                           ::
#  25>        FUNC_CALL[            NONE][ 29/ 29/ 36/  0][1/2/0][         8][0-0]                             forward
#  25>       ANGLE_OPEN[        TEMPLATE][ 36/ 36/ 37/  0][1/2/0][ 100000048][0-0]                                    <
#  25>             TYPE[            NONE][ 38/ 38/ 42/  1][1/3/0][     40048][0-0]                                      Args
#  25>      ANGLE_CLOSE[        TEMPLATE][ 43/ 43/ 44/  1][1/2/0][ 100000048][0-0]                                           >
#  25>      FPAREN_OPEN[       FUNC_CALL][ 44/ 44/ 45/  0][1/2/0][ 100040008][0-0]                                            (
#  25>             WORD[            NONE][ 45/ 45/ 49/  0][1/3/0][     40018][0-0]                                             args
#  25>     FPAREN_CLOSE[       FUNC_CALL][ 49/ 49/ 50/  0][1/2/0][ 100000008][0-0]                                                 )
#  25>         ELLIPSIS[            NONE][ 51/ 50/ 53/  0][1/2/0][ 100000008][0-0]                                                   ...
#  25>     FPAREN_CLOSE[   FUNC_CTOR_VAR][ 54/ 53/ 54/  0][1/1/0][ 100000000][0-0]                                                      )
#  25>        SEMICOLON[   FUNC_CTOR_VAR][ 55/ 54/ 55/  0][1/1/0][ 100000000][0-0]                                                       ;
#  25>          NEWLINE[            NONE][ 56/ 55/  5/  0][1/1/0][         0][1-0]
#  26>           RETURN[            NONE][  5/  5/ 11/  0][1/1/0][     70000][0-1]     return
#  26>             WORD[            NONE][ 12/ 12/ 13/  1][1/1/0][     40000][0-0]            v
#  26>        SEMICOLON[            NONE][ 13/ 13/ 14/  0][1/1/0][ 100000000][0-0]             ;
#  26>          NEWLINE[            NONE][ 14/ 14/  1/  0][1/1/0][         0][1-0]
#  27>      BRACE_CLOSE[        FUNC_DEF][  1/  1/  2/  0][0/0/0][ 100000000][0-0] }
#  27>          NEWLINE[            NONE][  2/  2/  1/  0][0/0/0][         0][1-0]
# -=====-
