# Uncrustify 0.64_d
input_tab_size                  = 4
output_tab_size                 = 4
indent_columns                  = 4
indent_class                    = true
indent_func_call_param          = true
indent_func_def_param           = true
indent_paren_close              = 2
sp_arith                        = force
sp_assign                       = force
sp_assign_default               = force
sp_enum_assign                  = force
sp_pp_concat                    = force
sp_pp_stringify                 = force
sp_bool                         = force
sp_compare                      = force
sp_inside_paren                 = force
sp_cparen_oparen                = force
sp_paren_brace                  = force
sp_before_ptr_star              = remove
sp_between_ptr_star             = remove
sp_after_ptr_star               = force
sp_after_ptr_star_qualifier     = force
sp_after_ptr_star_func          = force
sp_before_ptr_star_func         = remove
sp_before_byref                 = remove
sp_after_byref                  = force
sp_after_byref_func             = force
sp_before_byref_func            = remove
sp_template_angle               = remove
sp_before_angle                 = remove
sp_inside_angle                 = force
sp_after_angle                  = remove
sp_angle_paren                  = remove
sp_angle_paren_empty            = remove
sp_angle_word                   = force
sp_angle_shift                  = force
sp_before_sparen                = force
sp_inside_sparen                = force
sp_after_sparen                 = remove
sp_sparen_brace                 = remove
sp_special_semi                 = force
sp_before_semi_for              = remove
sp_before_semi_for_empty        = remove
sp_after_semi                   = remove
sp_after_semi_for_empty         = remove
sp_before_square                = remove
sp_before_squares               = remove
sp_inside_square                = remove
sp_after_comma                  = force
sp_before_ellipsis              = remove
sp_after_class_colon            = force
sp_before_class_colon           = force
sp_after_constr_colon           = force
sp_before_constr_colon          = force
sp_after_operator               = remove
sp_after_operator_sym           = remove
sp_after_operator_sym_empty     = remove
sp_after_cast                   = force
sp_inside_paren_cast            = remove
sp_cpp_cast_paren               = remove
sp_sizeof_paren                 = remove
sp_inside_braces_enum           = remove
sp_inside_braces_struct         = remove
sp_inside_braces                = force
sp_inside_braces_empty          = remove
sp_func_proto_paren             = remove
sp_func_proto_paren_empty       = remove
sp_func_def_paren               = remove
sp_func_def_paren_empty         = remove
sp_inside_fparens               = remove
sp_inside_fparen                = remove
sp_square_fparen                = remove
sp_fparen_brace                 = force
sp_func_call_paren              = remove
sp_func_class_paren             = remove
sp_func_class_paren_empty       = remove
sp_return_paren                 = force
sp_attribute_paren              = remove
sp_defined_paren                = remove
sp_throw_paren                  = force
sp_catch_paren                  = force
sp_macro                        = force
sp_macro_func                   = force
sp_else_brace                   = force
sp_brace_else                   = force
sp_brace_typedef                = force
sp_catch_brace                  = force
sp_brace_catch                  = force
sp_try_brace                    = force
sp_word_brace                   = remove
sp_word_brace_ns                = force
sp_before_dc                    = remove
sp_after_dc                     = remove
sp_cond_colon                   = force
sp_cond_question                = force
sp_case_label                   = force
sp_cmt_cpp_start                = force
sp_cmt_cpp_doxygen              = true
sp_cmt_cpp_qttr                 = true
sp_endif_cmt                    = force
sp_after_new                    = force
sp_between_new_paren            = remove
sp_before_tr_emb_cmt            = force
align_func_params               = true
align_var_def_span              = 1
align_assign_span               = 1
align_var_class_span            = 1
align_right_cmt_span            = 2
align_pp_define_span            = 4
nl_assign_leave_one_liners      = true
nl_enum_leave_one_liners        = true
nl_cpp_lambda_leave_one_liners  = true
nl_start_of_file                = remove
nl_end_of_file                  = force
nl_end_of_file_min              = 1
nl_assign_brace                 = force
nl_func_var_def_blk             = 1
nl_fcall_brace                  = force
nl_enum_brace                   = force
nl_struct_brace                 = force
nl_union_brace                  = force
nl_if_brace                     = force
nl_brace_else                   = force
nl_elseif_brace                 = force
nl_else_brace                   = force
nl_else_if                      = remove
nl_try_brace                    = force
nl_for_brace                    = force
nl_catch_brace                  = force
nl_brace_catch                  = force
nl_brace_square                 = force
nl_brace_fparen                 = force
nl_while_brace                  = force
nl_do_brace                     = force
nl_brace_while                  = force
nl_switch_brace                 = force
nl_multi_line_cond              = true
nl_before_throw                 = force
nl_namespace_brace              = force
nl_template_class               = force
nl_class_brace                  = force
nl_func_type_name               = remove
nl_func_class_scope             = remove
nl_func_scope_name              = remove
nl_func_proto_type_name         = remove
nl_func_paren                   = remove
nl_func_def_paren               = remove
nl_func_decl_start              = remove
nl_func_def_start               = force
nl_func_def_start_single        = remove
nl_func_decl_args               = remove
nl_func_def_args                = force
nl_func_decl_end                = remove
nl_func_def_end                 = force
nl_func_def_end_single          = remove
nl_func_decl_empty              = remove
nl_func_def_empty               = remove
nl_fdef_brace                   = force
nl_after_vbrace_close           = true
nl_before_if                    = force
nl_after_if                     = force
nl_before_for                   = force
nl_after_for                    = force
nl_before_while                 = force
nl_after_while                  = force
nl_before_switch                = force
nl_after_switch                 = force
nl_before_do                    = force
nl_after_do                     = force
nl_after_func_proto_group       = 1
nl_after_func_body              = 2
nl_after_func_body_class        = 2
nl_after_func_body_one_liner    = 2
nl_after_struct                 = 1
nl_after_class                  = 1
nl_before_access_spec           = 1
nl_after_return                 = true
mod_full_brace_do               = force
mod_full_brace_for              = force
mod_full_brace_if               = force
mod_full_brace_while            = force
mod_paren_on_return             = remove
mod_remove_extra_semicolon      = true
mod_add_long_switch_closebrace_comment = 20
mod_add_long_ifdef_endif_comment = 20
pp_indent_at_level              = true
# option(s) with 'not default' value: 186
#
# -=====-
# Line              Tag           Parent          Columns Br/Lvl/pp     Flag   Nl  Text
#   1>         TEMPLATE[            NONE][  1/  1/  9/  0][0/0/0][     60000][0-0] template
#   1>       ANGLE_OPEN[        TEMPLATE][  9/  9/ 10/  0][0/0/0][ 100000040][0-0]         <
#   1>             TYPE[            NONE][ 11/ 11/ 15/  1][0/1/0][     50040][0-0]           bool
#   1>             TYPE[            NONE][ 16/ 16/ 17/  1][0/1/0][        40][0-0]                B
#   1>            COMMA[            NONE][ 17/ 17/ 18/  0][0/1/0][ 100000040][0-0]                 ,
#   1>         TYPENAME[            NONE][ 19/ 19/ 27/  1][0/1/0][     50040][0-0]                   typename
#   1>             TYPE[            NONE][ 28/ 28/ 29/  1][0/1/0][        40][0-0]                            T
#   1>      ANGLE_CLOSE[        TEMPLATE][ 30/ 30/ 31/  1][0/0/0][ 100000040][0-0]                              >
#   1>          NEWLINE[            NONE][ 31/ 31/  1/  0][0/0/0][         0][1-0]
#   2>           STRUCT[        TEMPLATE][  1/  1/  7/  0][0/0/0][     50000][0-0] struct
#   2>             TYPE[          STRUCT][  8/  8/ 11/  1][0/0/0][         0][0-0]        Foo
#   2>          NEWLINE[            NONE][ 11/ 11/  1/  0][0/0/0][         0][1-0]
#   3>       BRACE_OPEN[          STRUCT][  1/  1/  2/  0][0/0/0][ 100000000][0-0] {
#   3>          NEWLINE[            NONE][  2/  2/  5/  0][1/1/0][         2][1-0]
#   4>        QUALIFIER[            NONE][  5/  5/ 11/  0][1/1/0][  10470402][0-1]     static
#   4>        QUALIFIER[            NONE][ 12/ 12/ 17/  1][1/1/0][  10410402][0-0]            const
#   4>             TYPE[            NONE][ 18/ 18/ 22/  1][1/1/0][  10410402][0-0]                  bool
#   4>             WORD[            NONE][ 23/ 23/ 28/  1][1/1/0][  11900402][0-0]                       value
#   4>           ASSIGN[            NONE][ 29/ 29/ 30/  1][1/1/0][ 100100402][0-0]                             =
#   4>             WORD[            NONE][ 31/ 31/ 32/  1][1/1/0][     40402][0-0]                               B
#   4>        SEMICOLON[            NONE][ 32/ 32/ 33/  0][1/1/0][ 100000402][0-0]                                ;
#   4>          NEWLINE[            NONE][ 33/ 33/  5/  0][1/1/0][         2][1-0]
#   5>          TYPEDEF[            NONE][  5/  5/ 12/  0][1/1/0][     70402][0-1]     typedef
#   5>             TYPE[            NONE][ 13/ 13/ 14/  1][1/1/0][     10482][0-0]             T
#   5>             TYPE[            NONE][ 15/ 15/ 19/  1][1/1/0][  80000482][0-0]               type
#   5>        SEMICOLON[         TYPEDEF][ 19/ 19/ 20/  0][1/1/0][ 100000482][0-0]                   ;
#   5>          NEWLINE[            NONE][ 20/ 20/  1/  0][1/1/0][         2][1-0]
#   6>      BRACE_CLOSE[          STRUCT][  1/  1/  2/  0][0/0/0][ 100000400][0-0] }
#   6>        SEMICOLON[          STRUCT][  2/  2/  3/  0][0/0/0][ 100000000][0-0]  ;
#   6>          NEWLINE[            NONE][  3/  3/  1/  0][0/0/0][         0][2-0]
#   8>      COMMENT_CPP[   COMMENT_WHOLE][  1/  1/ 33/  0][0/0/0][         0][0-0] // The equals signs get aligned.
#   8>          NEWLINE[            NONE][ 33/ 33/  1/  0][0/0/0][         0][1-0]
#   9>      COMMENT_CPP[   COMMENT_WHOLE][  1/  1/ 31/  0][0/0/0][         0][0-0] // Doesn't make a lot of sense
#   9>          NEWLINE[            NONE][ 31/ 31/  1/  0][0/0/0][         0][1-0]
#  10>         TEMPLATE[            NONE][  1/  1/  9/  0][0/0/0][     60000][0-0] template
#  10>       ANGLE_OPEN[        TEMPLATE][  9/  9/ 10/  0][0/0/0][ 100000040][0-0]         <
#  10>             TYPE[            NONE][ 11/ 11/ 15/  1][0/1/0][     50040][0-0]           bool
#  10>             TYPE[            NONE][ 16/ 16/ 17/  1][0/1/0][        40][0-0]                B
#  10>            COMMA[            NONE][ 17/ 17/ 18/  0][0/1/0][ 100000040][0-0]                 ,
#  10>         TYPENAME[            NONE][ 19/ 19/ 27/  1][0/1/0][  10050040][0-0]                   typename
#  10>             TYPE[            NONE][ 28/ 28/ 29/  1][0/1/0][  10000040][0-0]                            T
#  10>           ASSIGN[            NONE][ 30/ 30/ 31/  1][0/1/0][ 100300040][0-0]                              =
#  10>             TYPE[            NONE][ 32/ 32/ 36/  1][0/1/0][  10040040][0-0]                                void
#  10>      ANGLE_CLOSE[        TEMPLATE][ 37/ 37/ 38/  1][0/0/0][ 110000040][0-0]                                     >
#  10>          NEWLINE[            NONE][ 38/ 38/  1/  0][0/0/0][         0][1-0]
#  11>            USING[            NONE][  1/  1/  6/  0][0/0/0][  10050000][0-0] using
#  11>             WORD[            NONE][  7/  7/ 12/  1][0/0/0][  10000000][0-0]       Foo_t
#  11>           ASSIGN[            NONE][ 30/ 13/ 14/  1][0/0/0][ 100200000][0-0]                              =
#  11>         TYPENAME[            NONE][ 32/ 15/ 23/  1][0/0/0][     50000][0-0]                                typename
#  11>             WORD[            NONE][ 41/ 24/ 27/  1][0/0/0][         0][0-0]                                         Foo
#  11>       ANGLE_OPEN[        TEMPLATE][ 44/ 27/ 28/  0][0/0/0][ 100000040][0-0]                                            <
#  11>             TYPE[            NONE][ 46/ 29/ 30/  1][0/1/0][     40040][0-0]                                              B
#  11>            COMMA[            NONE][ 47/ 30/ 31/  0][0/1/0][ 100000040][0-0]                                               ,
#  11>             TYPE[            NONE][ 49/ 32/ 33/  1][0/1/0][     40040][0-0]                                                 T
#  11>      ANGLE_CLOSE[        TEMPLATE][ 51/ 34/ 35/  1][0/0/0][ 100000040][0-0]                                                   >
#  11>        DC_MEMBER[            NONE][ 52/ 35/ 37/  0][0/0/0][ 100040000][0-0]                                                    ::
#  11>             WORD[            NONE][ 54/ 37/ 41/  0][0/0/0][         0][0-0]                                                      type
#  11>        SEMICOLON[            NONE][ 58/ 41/ 42/  0][0/0/0][ 100000000][0-0]                                                          ;
#  11>          NEWLINE[            NONE][ 59/ 42/  1/  0][0/0/0][         0][2-0]
#  13>         TEMPLATE[            NONE][  1/  1/  9/  0][0/0/0][     60000][0-0] template
#  13>       ANGLE_OPEN[        TEMPLATE][  9/  9/ 10/  0][0/0/0][ 100000040][0-0]         <
#  13>             TYPE[            NONE][ 11/ 11/ 16/  1][0/1/0][     50040][0-0]           class
#  13>             TYPE[            NONE][ 17/ 17/ 18/  1][0/1/0][        40][0-0]                 T
#  13>            COMMA[            NONE][ 18/ 18/ 19/  0][0/1/0][ 100000040][0-0]                  ,
#  13>             TYPE[            NONE][ 20/ 20/ 28/  1][0/1/0][     50040][0-0]                    unsigned
#  13>             TYPE[            NONE][ 29/ 29/ 30/  1][0/1/0][        40][0-0]                             N
#  13>      ANGLE_CLOSE[        TEMPLATE][ 31/ 31/ 32/  1][0/0/0][ 100000040][0-0]                               >
#  13>          NEWLINE[            NONE][ 32/ 32/  1/  0][0/0/0][         0][1-0]
#  14>           STRUCT[        TEMPLATE][  1/  1/  7/  0][0/0/0][     50000][0-0] struct
#  14>             TYPE[          STRUCT][  8/  8/ 14/  1][0/0/0][         0][0-0]        extent
#  14>          NEWLINE[            NONE][ 14/ 14/  1/  0][0/0/0][         0][1-0]
#  15>       BRACE_OPEN[          STRUCT][  1/  1/  2/  0][0/0/0][ 100000000][0-0] {
#  15>          NEWLINE[            NONE][  2/  2/  5/  0][1/1/0][         2][1-0]
#  16>        QUALIFIER[            NONE][  5/  5/ 11/  0][1/1/0][  10470402][0-1]     static
#  16>        QUALIFIER[            NONE][ 12/ 12/ 17/  1][1/1/0][  10410402][0-0]            const
#  16>             TYPE[            NONE][ 18/ 18/ 26/  1][1/1/0][  10410402][0-0]                  unsigned
#  16>             TYPE[            NONE][ 27/ 27/ 31/  1][1/1/0][  10410402][0-0]                           long
#  16>             WORD[            NONE][ 32/ 32/ 37/  1][1/1/0][  11900402][0-0]                                value
#  16>           ASSIGN[            NONE][ 38/ 38/ 39/  1][1/1/0][ 100100402][0-0]                                      =
#  16>             WORD[            NONE][ 40/ 40/ 41/  1][1/1/0][     40402][0-0]                                        N
#  16>        SEMICOLON[            NONE][ 41/ 41/ 42/  0][1/1/0][ 100000402][0-0]                                         ;
#  16>          NEWLINE[            NONE][ 42/ 42/  1/  0][1/1/0][         2][1-0]
#  17>      BRACE_CLOSE[          STRUCT][  1/  1/  2/  0][0/0/0][ 100000400][0-0] }
#  17>        SEMICOLON[          STRUCT][  2/  2/  3/  0][0/0/0][ 100000000][0-0]  ;
#  17>          NEWLINE[            NONE][  3/  3/  1/  0][0/0/0][         0][2-0]
#  19>      COMMENT_CPP[   COMMENT_WHOLE][  1/  1/ 30/  0][0/0/0][         0][0-0] // They get aligned here, too
#  19>          NEWLINE[            NONE][ 30/ 30/  1/  0][0/0/0][         0][1-0]
#  20>         TEMPLATE[            NONE][  1/  1/  9/  0][0/0/0][     60000][0-0] template
#  20>       ANGLE_OPEN[        TEMPLATE][  9/  9/ 10/  0][0/0/0][ 100000040][0-0]         <
#  20>             TYPE[            NONE][ 11/ 11/ 16/  1][0/1/0][     50040][0-0]           class
#  20>             TYPE[            NONE][ 17/ 17/ 18/  1][0/1/0][        40][0-0]                 T
#  20>            COMMA[            NONE][ 18/ 18/ 19/  0][0/1/0][ 100000040][0-0]                  ,
#  20>             TYPE[            NONE][ 20/ 20/ 28/  1][0/1/0][  10050040][0-0]                    unsigned
#  20>             TYPE[            NONE][ 29/ 29/ 30/  1][0/1/0][  10000040][0-0]                             N
#  20>           ASSIGN[            NONE][ 34/ 31/ 32/  1][0/1/0][ 100300040][0-0]                                  =
#  20>           NUMBER[            NONE][ 36/ 33/ 34/  1][0/1/0][  10040040][0-0]                                    0
#  20>      ANGLE_CLOSE[        TEMPLATE][ 38/ 35/ 36/  1][0/0/0][ 110000040][0-0]                                      >
#  20>          NEWLINE[            NONE][ 39/ 36/  1/  0][0/0/0][         0][1-0]
#  21>        QUALIFIER[            NONE][  1/  1/ 10/  0][0/0/0][  10050000][0-0] constexpr
#  21>             TYPE[            NONE][ 11/ 11/ 19/  1][0/0/0][  10010000][0-0]           unsigned
#  21>             TYPE[            NONE][ 20/ 20/ 24/  1][0/0/0][  10010000][0-0]                    long
#  21>             WORD[            NONE][ 25/ 25/ 33/  1][0/0/0][  10000000][0-0]                         extent_v
#  21>           ASSIGN[            NONE][ 34/ 34/ 35/  1][0/0/0][ 100200000][0-0]                                  =
#  21>             WORD[            NONE][ 36/ 36/ 42/  1][0/0/0][     40000][0-0]                                    extent
#  21>       ANGLE_OPEN[        TEMPLATE][ 42/ 42/ 43/  0][0/0/0][ 100000040][0-0]                                          <
#  21>             TYPE[            NONE][ 44/ 44/ 45/  1][0/1/0][     40040][0-0]                                            T
#  21>            COMMA[            NONE][ 45/ 45/ 46/  0][0/1/0][ 100000040][0-0]                                             ,
#  21>             TYPE[            NONE][ 47/ 47/ 48/  1][0/1/0][     40040][0-0]                                               N
#  21>      ANGLE_CLOSE[        TEMPLATE][ 49/ 49/ 50/  1][0/0/0][ 100000040][0-0]                                                 >
#  21>        DC_MEMBER[            NONE][ 50/ 50/ 52/  0][0/0/0][ 100040000][0-0]                                                  ::
#  21>             WORD[            NONE][ 52/ 52/ 57/  0][0/0/0][         0][0-0]                                                    value
#  21>        SEMICOLON[            NONE][ 57/ 57/ 58/  0][0/0/0][ 100000000][0-0]                                                         ;
#  21>          NEWLINE[            NONE][ 58/ 58/  1/  0][0/0/0][         0][1-0]
# -=====-
