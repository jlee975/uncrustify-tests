# Uncrustify 0.64_d
input_tab_size                  = 4
output_tab_size                 = 4
sp_arith                        = force
sp_assign                       = force
sp_assign_default               = force
sp_enum_assign                  = force
sp_pp_concat                    = force
sp_pp_stringify                 = force
sp_bool                         = force
sp_compare                      = force
sp_inside_paren                 = force
sp_cparen_oparen                = force
sp_paren_brace                  = force
sp_before_ptr_star              = remove
sp_between_ptr_star             = remove
sp_after_ptr_star               = force
sp_after_ptr_star_qualifier     = force
sp_after_ptr_star_func          = force
sp_before_ptr_star_func         = remove
sp_before_byref                 = remove
sp_after_byref                  = force
sp_after_byref_func             = force
sp_before_byref_func            = remove
sp_template_angle               = remove
sp_before_angle                 = remove
sp_inside_angle                 = force
sp_after_angle                  = remove
sp_angle_paren                  = remove
sp_angle_paren_empty            = remove
sp_angle_word                   = force
sp_angle_shift                  = force
sp_before_sparen                = force
sp_inside_sparen                = force
sp_after_sparen                 = remove
sp_sparen_brace                 = remove
sp_special_semi                 = force
sp_before_semi_for              = remove
sp_before_semi_for_empty        = remove
sp_after_semi                   = remove
sp_after_semi_for_empty         = remove
sp_before_square                = remove
sp_before_squares               = remove
sp_inside_square                = remove
sp_after_comma                  = force
sp_before_ellipsis              = remove
sp_after_class_colon            = force
sp_before_class_colon           = force
sp_after_constr_colon           = force
sp_before_constr_colon          = force
sp_after_operator               = remove
sp_after_operator_sym           = remove
sp_after_operator_sym_empty     = remove
sp_after_cast                   = force
sp_inside_paren_cast            = remove
sp_cpp_cast_paren               = remove
sp_sizeof_paren                 = remove
sp_inside_braces_enum           = remove
sp_inside_braces_struct         = remove
sp_inside_braces                = force
sp_inside_braces_empty          = remove
sp_func_proto_paren             = remove
sp_func_proto_paren_empty       = remove
sp_func_def_paren               = remove
sp_func_def_paren_empty         = remove
sp_inside_fparens               = remove
sp_inside_fparen                = remove
sp_square_fparen                = remove
sp_fparen_brace                 = force
sp_func_call_paren              = remove
sp_func_class_paren             = remove
sp_func_class_paren_empty       = remove
sp_return_paren                 = force
sp_attribute_paren              = remove
sp_defined_paren                = remove
sp_throw_paren                  = force
sp_catch_paren                  = force
sp_macro                        = force
sp_macro_func                   = force
sp_else_brace                   = force
sp_brace_else                   = force
sp_brace_typedef                = force
sp_catch_brace                  = force
sp_brace_catch                  = force
sp_try_brace                    = force
sp_word_brace                   = remove
sp_word_brace_ns                = force
sp_before_dc                    = remove
sp_after_dc                     = remove
sp_cond_colon                   = force
sp_cond_question                = force
sp_case_label                   = force
sp_cmt_cpp_start                = force
sp_cmt_cpp_doxygen              = true
sp_cmt_cpp_qttr                 = true
sp_endif_cmt                    = force
sp_after_new                    = force
sp_between_new_paren            = remove
sp_before_tr_emb_cmt            = force
indent_columns                  = 4
indent_class                    = true
indent_func_call_param          = true
indent_func_def_param           = true
indent_paren_close              = 2
nl_assign_leave_one_liners      = true
nl_enum_leave_one_liners        = true
nl_cpp_lambda_leave_one_liners  = true
nl_start_of_file                = remove
nl_end_of_file                  = force
nl_end_of_file_min              = 1
nl_assign_brace                 = force
nl_func_var_def_blk             = 1
nl_fcall_brace                  = force
nl_enum_brace                   = force
nl_struct_brace                 = force
nl_union_brace                  = force
nl_if_brace                     = force
nl_brace_else                   = force
nl_elseif_brace                 = force
nl_else_brace                   = force
nl_else_if                      = remove
nl_try_brace                    = force
nl_for_brace                    = force
nl_catch_brace                  = force
nl_brace_catch                  = force
nl_brace_square                 = force
nl_brace_fparen                 = force
nl_while_brace                  = force
nl_do_brace                     = force
nl_brace_while                  = force
nl_switch_brace                 = force
nl_multi_line_cond              = true
nl_before_throw                 = force
nl_namespace_brace              = force
nl_template_class               = force
nl_class_brace                  = force
nl_func_type_name               = remove
nl_func_class_scope             = remove
nl_func_scope_name              = remove
nl_func_proto_type_name         = remove
nl_func_paren                   = remove
nl_func_def_paren               = remove
nl_func_decl_start              = remove
nl_func_def_start               = force
nl_func_def_start_single        = remove
nl_func_decl_args               = remove
nl_func_def_args                = force
nl_func_decl_end                = remove
nl_func_def_end                 = force
nl_func_def_end_single          = remove
nl_func_decl_empty              = remove
nl_func_def_empty               = remove
nl_fdef_brace                   = force
nl_after_vbrace_close           = true
nl_before_if                    = force
nl_after_if                     = force
nl_before_for                   = force
nl_after_for                    = force
nl_before_while                 = force
nl_after_while                  = force
nl_before_switch                = force
nl_after_switch                 = force
nl_before_do                    = force
nl_after_do                     = force
nl_after_func_proto_group       = 1
nl_after_func_body              = 2
nl_after_func_body_class        = 2
nl_after_func_body_one_liner    = 2
nl_after_struct                 = 1
nl_after_class                  = 1
nl_before_access_spec           = 1
nl_after_return                 = true
align_func_params               = true
align_var_def_span              = 1
align_assign_span               = 1
align_var_class_span            = 1
align_right_cmt_span            = 2
align_pp_define_span            = 4
mod_full_brace_do               = force
mod_full_brace_for              = force
mod_full_brace_if               = force
mod_full_brace_while            = force
mod_paren_on_return             = remove
mod_remove_extra_semicolon      = true
mod_add_long_switch_closebrace_comment = 20
mod_add_long_ifdef_endif_comment = 20
pp_indent_at_level              = true
# option(s) with 'not default' value: 186
#
# -=====-
# Line              Tag           Parent          Columns Br/Lvl/pp     Flag   Nl  Text
#   1>        NAMESPACE[            NONE][  1/  1/ 10/  0][0/0/0][     70000][0-0] namespace
#   1>             WORD[       NAMESPACE][ 11/ 11/ 14/  1][0/0/0][         0][0-0]           foo
#   1>          NEWLINE[            NONE][ 14/ 14/  1/  0][0/0/0][         0][1-0]
#   2>       BRACE_OPEN[       NAMESPACE][  1/  1/  2/  0][0/0/0][ 100000000][0-0] {
#   2>          NEWLINE[            NONE][  2/  2/  1/  0][1/1/0][      1000][1-0]
#   3>            CLASS[            NONE][  1/  1/  6/  0][1/1/0][     71000][0-0] class
#   3>             TYPE[           CLASS][  7/  7/ 10/  1][1/1/0][      1000][0-0]       Bar
#   3>          NEWLINE[            NONE][ 10/ 10/  1/  0][1/1/0][      1000][1-0]
#   4>       BRACE_OPEN[           CLASS][  1/  1/  2/  0][1/1/0][ 140001000][0-0] {
#   4>          NEWLINE[            NONE][  2/  2/  1/  0][2/2/0][      1000][1-0]
#   5>      BRACE_CLOSE[           CLASS][  1/  1/  2/  0][1/1/0][ 140001400][0-0] }
#   5>        SEMICOLON[           CLASS][  2/  2/  3/  0][1/1/0][ 100001000][0-0]  ;
#   5>          NEWLINE[            NONE][  3/  3/  1/  0][1/1/0][      1000][1-0]
#   6>      BRACE_CLOSE[       NAMESPACE][  1/  1/  2/  0][0/0/0][ 100000000][0-0] }
#   6>          NEWLINE[            NONE][  2/  2/  1/  0][0/0/0][         0][2-0]
#   8>            CLASS[            NONE][  1/  1/  6/  0][0/0/0][     70000][0-0] class
#   8>             TYPE[           CLASS][  7/  7/  8/  1][0/0/0][         0][0-0]       T
#   8>          NEWLINE[            NONE][  8/  8/  1/  0][0/0/0][         0][1-0]
#   9>       BRACE_OPEN[           CLASS][  1/  1/  2/  0][0/0/0][ 100000000][0-0] {
#   9>          NEWLINE[            NONE][  2/  2/  1/  0][1/1/0][         0][1-0]
#  10>          PRIVATE[            NONE][  1/  1/  7/  0][1/1/0][     60400][0-0] public
#  10>    PRIVATE_COLON[            NONE][  7/  7/  8/  0][1/1/0][ 100000400][0-0]       :
#  10>          NEWLINE[            NONE][  8/  8/  5/  0][1/1/0][         0][1-0]
#  11>      COMMENT_CPP[   COMMENT_WHOLE][  5/  5/ 49/  0][1/1/0][         0][0-1]     // Styles as "const ::foo::Bar& get() const"
#  11>          NEWLINE[            NONE][ 49/ 49/  5/  0][1/1/0][         0][1-0]
#  12>      COMMENT_CPP[   COMMENT_WHOLE][  5/  5/ 20/  0][1/1/0][         0][0-1]     // (As desired)
#  12>          NEWLINE[            NONE][ 20/ 20/  5/  0][1/1/0][         0][1-0]
#  13>        QUALIFIER[            NONE][  5/  5/ 10/  0][1/1/0][    460400][0-1]     const
#  13>        DC_MEMBER[            NONE][ 11/ 11/ 13/  1][1/1/0][ 100400400][0-0]           ::
#  13>             TYPE[            NONE][ 13/ 13/ 16/  0][1/1/0][    400400][0-0]             foo
#  13>        DC_MEMBER[            NONE][ 16/ 16/ 18/  0][1/1/0][ 100400400][0-0]                ::
#  13>             TYPE[            NONE][ 18/ 18/ 21/  0][1/1/0][    400400][0-0]                  Bar
#  13>            BYREF[            NONE][ 21/ 21/ 22/  0][1/1/0][ 100000400][0-0]                     &
#  13>        FUNC_CALL[            NONE][ 23/ 23/ 26/  1][1/1/0][       400][0-0]                       get
#  13>      FPAREN_OPEN[       FUNC_CALL][ 26/ 26/ 27/  0][1/1/0][ 100000400][0-0]                          (
#  13>     FPAREN_CLOSE[       FUNC_CALL][ 27/ 27/ 28/  0][1/1/0][ 100000400][0-0]                           )
#  13>        QUALIFIER[            NONE][ 29/ 29/ 34/  1][1/1/0][       400][0-0]                             const
#  13>          NEWLINE[            NONE][ 34/ 34/  5/  0][1/1/0][         0][1-0]
#  14>       BRACE_OPEN[            NONE][  5/  5/  6/  0][1/1/0][ 100000400][0-1]     {
#  14>          NEWLINE[            NONE][  6/  6/  9/  0][2/2/0][         0][1-0]
#  15>           RETURN[            NONE][  9/  9/ 15/  0][2/2/0][     70400][0-1]         return
#  15>             WORD[            NONE][ 16/ 16/ 19/  1][2/2/0][     40400][0-0]                bar
#  15>        SEMICOLON[            NONE][ 19/ 19/ 20/  0][2/2/0][ 100000400][0-0]                   ;
#  15>          NEWLINE[            NONE][ 20/ 20/  5/  0][2/2/0][         0][1-0]
#  16>      BRACE_CLOSE[            NONE][  5/  5/  6/  0][1/1/0][ 100000400][0-1]     }
#  16>          NEWLINE[            NONE][  6/  6/  5/  0][1/1/0][         0][2-0]
#  18>      COMMENT_CPP[   COMMENT_WHOLE][  5/  5/ 40/  0][1/1/0][         0][0-1]     // Styles as "operator int() const"
#  18>          NEWLINE[            NONE][ 40/ 40/  5/  0][1/1/0][         0][1-0]
#  19>      COMMENT_CPP[   COMMENT_WHOLE][  5/  5/ 20/  0][1/1/0][         0][0-1]     // (As desired)
#  19>          NEWLINE[            NONE][ 20/ 20/  5/  0][1/1/0][         0][1-0]
#  20>         OPERATOR[            NONE][  5/  5/ 13/  0][1/1/0][     70400][0-1]     operator
#  20>        FUNC_CALL[        OPERATOR][ 14/ 14/ 17/  1][1/1/0][       400][0-0]              int
#  20>      FPAREN_OPEN[       FUNC_CALL][ 17/ 17/ 18/  0][1/1/0][ 100000400][0-0]                 (
#  20>     FPAREN_CLOSE[       FUNC_CALL][ 18/ 18/ 19/  0][1/1/0][ 100000400][0-0]                  )
#  20>        QUALIFIER[            NONE][ 20/ 20/ 25/  1][1/1/0][       400][0-0]                    const
#  20>          NEWLINE[            NONE][ 25/ 25/  5/  0][1/1/0][         0][1-0]
#  21>       BRACE_OPEN[            NONE][  5/  5/  6/  0][1/1/0][ 100000400][0-1]     {
#  21>          NEWLINE[            NONE][  6/  6/  9/  0][2/2/0][         0][1-0]
#  22>           RETURN[            NONE][  9/  9/ 15/  0][2/2/0][     60400][0-1]         return
#  22>           NUMBER[            NONE][ 16/ 16/ 17/  1][2/2/0][     40400][0-0]                0
#  22>        SEMICOLON[            NONE][ 17/ 17/ 18/  0][2/2/0][ 100000400][0-0]                 ;
#  22>          NEWLINE[            NONE][ 18/ 18/  5/  0][2/2/0][         0][1-0]
#  23>      BRACE_CLOSE[            NONE][  5/  5/  6/  0][1/1/0][ 100000400][0-1]     }
#  23>          NEWLINE[            NONE][  6/  6/  5/  0][1/1/0][         0][2-0]
#  25>      COMMENT_CPP[   COMMENT_WHOLE][  5/  5/ 56/  0][1/1/0][         0][0-1]     // Styles as "operator const::foo::Bar & ( ) const"
#  25>          NEWLINE[            NONE][ 56/ 56/  5/  0][1/1/0][         0][1-0]
#  26>      COMMENT_CPP[   COMMENT_WHOLE][  5/  5/ 47/  0][1/1/0][         0][0-1]     // - No space before global scope operator
#  26>          NEWLINE[            NONE][ 47/ 47/  5/  0][1/1/0][         0][1-0]
#  27>      COMMENT_CPP[   COMMENT_WHOLE][  5/  5/ 54/  0][1/1/0][         0][0-1]     // - & treated like operator instead of reference
#  27>          NEWLINE[            NONE][ 54/ 54/  5/  0][1/1/0][         0][1-0]
#  28>      COMMENT_CPP[   COMMENT_WHOLE][  5/  5/ 44/  0][1/1/0][         0][0-1]     // - Space inserted between parentheses
#  28>          NEWLINE[            NONE][ 44/ 44/  5/  0][1/1/0][         0][1-0]
#  29>         OPERATOR[            NONE][  5/  5/ 13/  0][1/1/0][     70400][0-1]     operator
#  29>     OPERATOR_VAL[        OPERATOR][ 14/ 14/ 19/  1][1/1/0][       400][0-0]              const
#  29>        DC_MEMBER[            NONE][ 19/ 20/ 22/  1][1/1/0][ 100000400][0-0]                   ::
#  29>             TYPE[            NONE][ 21/ 22/ 25/  0][1/1/0][       400][0-0]                     foo
#  29>        DC_MEMBER[            NONE][ 24/ 25/ 27/  0][1/1/0][ 100000400][0-0]                        ::
#  29>             WORD[            NONE][ 26/ 27/ 30/  0][1/1/0][       400][0-0]                          Bar
#  29>            ARITH[            NONE][ 30/ 30/ 31/  0][1/1/0][ 100000400][0-0]                              &
#  29>       PAREN_OPEN[            NONE][ 32/ 31/ 32/  0][1/1/0][ 100000400][0-0]                                (
#  29>      PAREN_CLOSE[            NONE][ 34/ 32/ 33/  0][1/1/0][ 100000400][0-0]                                  )
#  29>        QUALIFIER[            NONE][ 36/ 34/ 39/  1][1/1/0][       400][0-0]                                    const
#  29>          NEWLINE[            NONE][ 41/ 39/  5/  0][1/1/0][         0][1-0]
#  30>       BRACE_OPEN[            NONE][  5/  5/  6/  0][1/1/0][ 100000400][0-1]     {
#  30>          NEWLINE[            NONE][  6/  6/  9/  0][2/2/0][         0][1-0]
#  31>           RETURN[            NONE][  9/  9/ 15/  0][2/2/0][     70400][0-1]         return
#  31>             WORD[            NONE][ 16/ 16/ 19/  1][2/2/0][     40400][0-0]                bar
#  31>        SEMICOLON[            NONE][ 19/ 19/ 20/  0][2/2/0][ 100000400][0-0]                   ;
#  31>          NEWLINE[            NONE][ 20/ 20/  5/  0][2/2/0][         0][1-0]
#  32>      BRACE_CLOSE[            NONE][  5/  5/  6/  0][1/1/0][ 100000400][0-1]     }
#  32>          NEWLINE[            NONE][  6/  6/  1/  0][1/1/0][         0][1-0]
#  33>          PRIVATE[            NONE][  1/  1/  8/  0][1/1/0][     60400][0-0] private
#  33>    PRIVATE_COLON[            NONE][  8/  8/  9/  0][1/1/0][ 100000400][0-0]        :
#  33>          NEWLINE[            NONE][  9/  9/  5/  0][1/1/0][         0][1-0]
#  34>             TYPE[            NONE][  5/  5/  8/  0][1/1/0][    460400][0-1]     foo
#  34>        DC_MEMBER[            NONE][  8/  8/ 10/  0][1/1/0][ 100400400][0-0]        ::
#  34>             TYPE[            NONE][ 10/ 10/ 13/  0][1/1/0][    410400][0-0]          Bar
#  34>             WORD[            NONE][ 14/ 14/ 17/  1][1/1/0][   1900400][0-0]              bar
#  34>        SEMICOLON[            NONE][ 17/ 17/ 18/  0][1/1/0][ 100000400][0-0]                 ;
#  34>          NEWLINE[            NONE][ 18/ 18/  1/  0][1/1/0][         0][1-0]
#  35>      BRACE_CLOSE[           CLASS][  1/  1/  2/  0][0/0/0][ 100000400][0-0] }
#  35>        SEMICOLON[           CLASS][  2/  2/  3/  0][0/0/0][ 100000000][0-0]  ;
#  35>          NEWLINE[            NONE][  3/  3/  1/  0][0/0/0][         0][1-0]
# -=====-
